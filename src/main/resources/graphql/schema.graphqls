type Query {
    # Post Queries
    getPost(id: ID!): Post
    allPosts(page: Int, size: Int): PostPage
    searchPosts(query: String!, page: Int, size: Int): PostPage
    postsByUser(userId: String!, page: Int, size: Int): PostPage
    postByTag(tag: String!, page: Int, size: Int): PostPage

    # Comment Queries
    getAllComments(page: Int!, size: Int!): CommentPage
    getSingleComment(id: String!): Comment
    getCommentsByPost(postId: String!, page: Int!, size: Int!): CommentPage
    getCommentsByUser(userId: String!, page: Int!, size: Int!): CommentPage

    # Location Queries
    getAllLocations(page: Int!, size: Int!): LocationPage
    getSingleLocation(id: String!): Location

    # Tag Queries
    getAllTags(page: Int!, size: Int!): TagPage
    getSingleTag(id: String!): Tag
}

type Mutation {
    # Post Mutations
    createPost(input: PostInput!): Post
    updatePost(id: ID!, input: PostInput!): Post
    deletePost(id: ID!): String

    # Comment Mutations
    createComment(input: CommentInput!): Comment
    updateComment(id: String!, input: CommentInput!): Comment
    deleteComment(id: String!): String

    # Auth Mutation
    login(input: LoginInput!): LoginResponse

    # Location Mutations
    createLocation(input: LocationInput!): Location
    updateLocation(id: String!, input: LocationInput!): Location
    deleteLocation(id: String!): String

    #Tag Mutation
    createTag(input: TagInput!): Tag
    updateTag(id: String!, input: TagInput!): Tag
    deleteTag(id: String!): String
}

# ===================
# Post Types
# ===================
type Post {
    postId: ID!
    postText: String!
    postImage: String
    postLikes: Int
    postLink: String
    postTags: [String]
    postPublishDate: String
    postOwnerId: String
}

type PostPage {
    data: [Post]
    total: Int
    page: Int
    size: Int
}

input PostInput {
    postText: String!
    postImage: String
    postLikes: Int
    postLink: String
    postTags: [String]
    postOwnerId: String!
}

# ===================
# Comment Types
# ===================
type Comment {
    commentId: String!
    commentMessage: String!
    commentOwnerId: String!
    commentPostId: String!
    commentPublishDate: String!
}

input CommentInput {
    commentMessage: String!
    commentOwnerId: String!
    commentPostId: String!
}

type CommentPage {
    data: [Comment!]!
    total: Int!
    page: Int!
    size: Int!
}

# ===================
# Auth Types
# ===================
input LoginInput {
    userEmail: String!
    userPassword: String!
}

type LoginResponse {
    userId: String!
    message: String!
}

# ===================
# Location Types
# ===================
type Location {
    locationId: String!
    locationStreet: String!
    locationCity: String!
    locationState: String!
    locationCountry: String!
    locationTimezone: String!
}

input LocationInput {
    locationStreet: String!
    locationCity: String!
    locationState: String!
    locationCountry: String!
    locationTimezone: String!
}

type LocationPage {
    data: [Location!]!
    total: Int!
    page: Int!
    size: Int!
}

# ===================
# Tag Types
# ===================

type Tag {
    tagId: String!
    tagName: String!
}

input TagInput {
    tagName: String!
}

type TagPage {
    data: [Tag!]!
    total: Int!
    page: Int!
    size: Int!
}